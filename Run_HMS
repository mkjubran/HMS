#!/bin/bash
#clear
fid="scene_level_sample_320240_1min"
RankListFile=./OrderedFrames_1min.txt
QP=24
MaxCUSize=16
MaxPartitionDepth=2
Ref_active=8
Ref_stitch=2
FramesToBeEncoded=30000

for i in "$@"
do
case $i in
    -vid=*|--vid=*)
    fid="${i#*=}"
    shift
    ;;
    -rlist=*|--rlist=*)
    RankListFile="${i#*=}"
    shift
    ;;
    -qp=*|--qp=*)
    QP="${i#*=}"
    shift
    ;;
    -mcu=*|--mcu=*)
    MaxCUSize="${i#*=}"
    shift
    ;;
    -mpd=*|--mpd=*)
    MaxPartitionDepth="${i#*=}"
    shift
    ;;
    -refa=*|--refa=*)
    Ref_active="${i#*=}"
    shift
    ;;
    -refs=*|--refs=*)
    Ref_stitch="${i#*=}"
    shift
    ;;
    -nf=*|--nf=*)
    FramesToBeEncoded="${i#*=}"
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done
#### End Parsing Command Line Parameters


HMSResults="./HMSResults/"$fid"_QP"$QP"_MCU"$MaxCUSize"_Depth"$MaxPartitionDepth"_RefA"$Ref_active"_RefS"$Ref_stitch".dat"

InputYUV="../vid/"$fid".yuv"
InputMP4="../vid/"$fid".mp4"


rm $HMSResults
echo "Input File (YUV) = "$InputYUV > $HMSResults
echo "Input File (MP4) = "$InputMP4 >> $HMSResults
echo "RankListFile = "$RankListFile >> $HMSResults
echo "Ref_active = "$Ref_active >> $HMSResults
echo "Ref_stitch = "$Ref_stitch >> $HMSResults
echo "QP = "$QP >> $HMSResults
echo "MaxCUSize = "$MaxCUSize >> $HMSResults
echo "MaxPartitionDepth = "$MaxPartitionDepth >> $HMSResults
echo "" >> $HMSResults

rm -rf ./encoder_HMS_GOB.cfg
python CreateHMGOBStruct.py --ranklist $RankListFile --ref_active $Ref_active --ref_stitch $Ref_stitch


rm -rf "../vid/HMEncodedVideo.bin"
rm -rf encoder.log
./HMS/bin/TAppEncoderStatic -c ./HMS/cfg/encoder_HMS.cfg -c ./encoder_HMS_GOB.cfg --InputFile=$InputYUV --QP=$QP --FramesToBeEncoded=$FramesToBeEncoded --MaxCUSize=$MaxCUSize --MaxPartitionDepth=$MaxPartitionDepth --QuadtreeTULog2MaxSize=4 --BitstreamFile="../vid/HMEncodedVideo.bin" > encoder.log

file_size=`du -b "../vid/HMEncodedVideo.bin" | cut -f1`
echo "File Size (.bin) = "$file_size" Bytes" >> $HMSResults
echo "" >> $HMSResults

rm -rf "../vid/HMDecodedVideo_Stitching.yuv"
./HMS/bin/TAppDecoderStatic --BitstreamFile="../vid/HMEncodedVideo.bin" --ReconFile="../vid/HMDecodedVideo_Stitching.yuv" > /dev/null

python ./Quality/measure.py  $InputYUV ../vid/HMDecodedVideo_Stitching.yuv 320 240 >> $HMSResults 

## Parsing the Number of frames, size of bitstream, and size of motion info from the $JMFrameStatsOrigFileName
NumFrame=0
Size_Frame_Total=0;
while IFS=$'\t' read -r HMSLine
do
  printf 'f1: %s\n' "$HMSLine"
  IFS='| ' read -r -a HMSLine_array1 <<< "$HMSLine"
  if [[ "${HMSLine_array1[0]}" == *"POC"* ]]
  then
    NumFrame=$(echo ${HMSLine_array1[1]} | tr -d ' ')
  fi

  IFS=' :()' read -r -a HMSLine_array2 <<< "$HMSLine"
  if [[ "${HMSLine_array2[1]}" == *"written"* ]]
  then
    WrittenBytes=$(echo ${HMSLine_array2[4]} | tr -d ' ')
    BitRate=$(echo ${HMSLine_array2[5]} | tr -d ' ')
  fi
done < <(paste "./encoder.log")

echo "" >> $HMSResults
echo "Number of Frames = "$((NumFrame + 1)) >> $HMSResults
echo "Number of written bytes = "$WrittenBytes >> $HMSResults
echo "Bit Rate = "$BitRate" kbps" >> $HMSResults
